    // Fetch available models
    async function fetchModels() {
        try {
            const response = await fetch('/models');
            const data = await response.json();
            const modelSelect = document.getElementById('modelSelect');
            const chatBaseModel = document.getElementById('chatBaseModel');
            modelSelect.innerHTML = ''; // Clear existing options
            chatBaseModel.innerHTML = ''; // Clear existing options

            if (response.ok && !data.error) {
                data.forEach(model => {
                    const option = document.createElement('option');
                    option.value = model.name;
                    var modelText = model.name;
                    if (model.size) modelText += ` (${model.size})`;
                    if (model.family) modelText += ` - ${model.family}`;
                    option.textContent = modelText;
                    
                    // Add to main model select
                    modelSelect.appendChild(option.cloneNode(true));
                    
                    // Add to chat base model select
                    chatBaseModel.appendChild(option.cloneNode(true));
                });
            } else {
                const errorOption = document.createElement('option');
                errorOption.value = '';
                errorOption.textContent = data.error || 'Error loading models';
                errorOption.disabled = true;
                modelSelect.appendChild(errorOption.cloneNode(true));
                chatBaseModel.appendChild(errorOption.cloneNode(true));
                console.error('Model fetch error:', data.error);
            }
        } catch (error) {
            console.error('Error fetching models:', error);
            const errorHtml = '<option disabled>Failed to load models</option>';
            document.getElementById('modelSelect').innerHTML = errorHtml;
            document.getElementById('chatBaseModel').innerHTML = errorHtml;
        }
    }

    fetchModels();
    // Refresh models list periodically
    setInterval(fetchModels, 30000); // Every 30 seconds